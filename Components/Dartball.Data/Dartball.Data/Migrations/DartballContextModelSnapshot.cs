// <auto-generated />
using System;
using Dartball.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dartball.Data.Migrations
{
    [DbContext(typeof(DartballContext))]
    partial class DartballContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799");

            modelBuilder.Entity("Dartball.Domain.Game", b =>
                {
                    b.Property<string>("GameId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangeDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<DateTime>("GameDate");

                    b.Property<string>("LeagueId");

                    b.HasKey("GameId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Dartball.Domain.GameInning", b =>
                {
                    b.Property<string>("GameInningId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangeDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("GameId");

                    b.Property<int>("InningNumber");

                    b.HasKey("GameInningId");

                    b.HasIndex("GameId", "InningNumber");

                    b.ToTable("GameInnings");
                });

            modelBuilder.Entity("Dartball.Domain.GameInningTeam", b =>
                {
                    b.Property<string>("GameInningTeamId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangeDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("GameInningId");

                    b.Property<string>("GameTeamId");

                    b.Property<int>("IsRunnerOnFirst");

                    b.Property<int>("IsRunnerOnSecond");

                    b.Property<int>("IsRunnerOnThird");

                    b.Property<int>("Outs");

                    b.Property<int>("Score");

                    b.HasKey("GameInningTeamId");

                    b.HasIndex("GameInningId", "GameTeamId");

                    b.ToTable("GameInningTeams");
                });

            modelBuilder.Entity("Dartball.Domain.GameInningTeamBatter", b =>
                {
                    b.Property<string>("GameInningTeamBatterId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangeDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<int>("EventType");

                    b.Property<string>("GameInningTeamId");

                    b.Property<string>("PlayerId");

                    b.Property<int>("RBIs");

                    b.Property<int>("Sequence");

                    b.Property<int?>("TargetEventType");

                    b.HasKey("GameInningTeamBatterId");

                    b.HasIndex("GameInningTeamId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameInningTeamBatters");
                });

            modelBuilder.Entity("Dartball.Domain.GameTeam", b =>
                {
                    b.Property<string>("GameId");

                    b.Property<string>("TeamId");

                    b.Property<DateTime>("ChangeDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("GameTeamId");

                    b.HasKey("GameId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("GameTeams");
                });

            modelBuilder.Entity("Dartball.Domain.League", b =>
                {
                    b.Property<string>("LeagueId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangeDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("LeagueId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Dartball.Domain.Player", b =>
                {
                    b.Property<string>("PlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangeDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<byte[]>("Photo");

                    b.Property<int>("ShouldSync");

                    b.Property<string>("UserName");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Dartball.Domain.PlayerTeam", b =>
                {
                    b.Property<string>("PlayerId");

                    b.Property<string>("TeamId");

                    b.Property<DateTime>("ChangeDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("PlayerTeamId");

                    b.HasKey("PlayerId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayerTeams");
                });

            modelBuilder.Entity("Dartball.Domain.Team", b =>
                {
                    b.Property<string>("TeamId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangeDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<int?>("Handicap");

                    b.Property<string>("LeagueId");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int>("ShouldSync");

                    b.HasKey("TeamId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Dartball.Domain.TeamPlayerLineup", b =>
                {
                    b.Property<string>("TeamId");

                    b.Property<string>("PlayerId");

                    b.Property<int>("BattingOrder");

                    b.Property<DateTime>("ChangeDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("TeamPlayerLineupId");

                    b.HasKey("TeamId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("TeamPlayerLineups");
                });

            modelBuilder.Entity("Dartball.Domain.Game", b =>
                {
                    b.HasOne("Dartball.Domain.League", "League")
                        .WithMany("Games")
                        .HasForeignKey("LeagueId");
                });

            modelBuilder.Entity("Dartball.Domain.GameInning", b =>
                {
                    b.HasOne("Dartball.Domain.Game", "Game")
                        .WithMany("GameInnings")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("Dartball.Domain.GameInningTeam", b =>
                {
                    b.HasOne("Dartball.Domain.GameInning", "GameInning")
                        .WithMany("GameInningTeams")
                        .HasForeignKey("GameInningId");
                });

            modelBuilder.Entity("Dartball.Domain.GameInningTeamBatter", b =>
                {
                    b.HasOne("Dartball.Domain.GameInningTeam", "GameInningTeam")
                        .WithMany("GameInningTeamBatters")
                        .HasForeignKey("GameInningTeamId");

                    b.HasOne("Dartball.Domain.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("Dartball.Domain.GameTeam", b =>
                {
                    b.HasOne("Dartball.Domain.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dartball.Domain.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dartball.Domain.PlayerTeam", b =>
                {
                    b.HasOne("Dartball.Domain.Player", "Player")
                        .WithMany("PlayerTeams")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dartball.Domain.Team", "Team")
                        .WithMany("PlayerTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dartball.Domain.Team", b =>
                {
                    b.HasOne("Dartball.Domain.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId");
                });

            modelBuilder.Entity("Dartball.Domain.TeamPlayerLineup", b =>
                {
                    b.HasOne("Dartball.Domain.Player", "Player")
                        .WithMany("TeamPlayerLineups")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dartball.Domain.Team", "Team")
                        .WithMany("TeamPlayerLineups")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
